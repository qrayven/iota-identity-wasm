/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_timestamp_free(a: number): void;
export function timestamp_new(): number;
export function timestamp_parse(a: number, b: number, c: number): void;
export function timestamp_toRFC3339(a: number, b: number): void;
export function timestamp_checkedAdd(a: number, b: number): number;
export function timestamp_checkedSub(a: number, b: number): number;
export function timestamp_toJSON(a: number, b: number): void;
export function timestamp_fromJSON(a: number, b: number): void;
export function __wbg_duration_free(a: number): void;
export function duration_seconds(a: number): number;
export function duration_minutes(a: number): number;
export function duration_hours(a: number): number;
export function duration_days(a: number): number;
export function duration_weeks(a: number): number;
export function duration_toJSON(a: number, b: number): void;
export function duration_fromJSON(a: number, b: number): void;
export function __wbg_jws_free(a: number): void;
export function jws_constructor(a: number, b: number): number;
export function jws_toString(a: number, b: number): void;
export function jwt_toString(a: number, b: number): void;
export function jwt_toJSON(a: number, b: number): void;
export function jwt_fromJSON(a: number, b: number): void;
export function jwt_clone(a: number): number;
export function __wbg_sdjwtcredentialvalidator_free(a: number): void;
export function sdjwtcredentialvalidator_new(a: number): number;
export function sdjwtcredentialvalidator_validateCredential(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function sdjwtcredentialvalidator_verifySignature(a: number, b: number, c: number, d: number, e: number): void;
export function sdjwtcredentialvalidator_validateKeyBindingJwt(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_jwk_free(a: number): void;
export function jwk_new(a: number): number;
export function jwk_kty(a: number): number;
export function jwk_use(a: number): number;
export function jwk_keyOps(a: number): number;
export function jwk_alg(a: number): number;
export function jwk_kid(a: number, b: number): void;
export function jwk_x5u(a: number, b: number): void;
export function jwk_x5c(a: number): number;
export function jwk_x5t(a: number, b: number): void;
export function jwk_x5t256(a: number, b: number): void;
export function jwk_paramsEc(a: number, b: number): void;
export function jwk_paramsOkp(a: number, b: number): void;
export function jwk_paramsOct(a: number, b: number): void;
export function jwk_paramsRsa(a: number, b: number): void;
export function jwk_toPublic(a: number): number;
export function jwk_isPublic(a: number): number;
export function jwk_isPrivate(a: number): number;
export function jwk_toJSON(a: number, b: number): void;
export function jwk_fromJSON(a: number, b: number): void;
export function jwk_clone(a: number): number;
export function __wbg_jwsheader_free(a: number): void;
export function jwsheader_new(): number;
export function jwsheader_alg(a: number): number;
export function jwsheader_setAlg(a: number, b: number, c: number): void;
export function jwsheader_b64(a: number): number;
export function jwsheader_setB64(a: number, b: number): void;
export function jwsheader_custom(a: number): number;
export function jwsheader_has(a: number, b: number, c: number): number;
export function jwsheader_isDisjoint(a: number, b: number): number;
export function jwsheader_jku(a: number, b: number): void;
export function jwsheader_setJku(a: number, b: number, c: number, d: number): void;
export function jwsheader_jwk(a: number): number;
export function jwsheader_setJwk(a: number, b: number): void;
export function jwsheader_kid(a: number, b: number): void;
export function jwsheader_setKid(a: number, b: number, c: number): void;
export function jwsheader_x5u(a: number, b: number): void;
export function jwsheader_setX5u(a: number, b: number, c: number, d: number): void;
export function jwsheader_setX5c(a: number, b: number, c: number): void;
export function jwsheader_x5t(a: number, b: number): void;
export function jwsheader_setX5t(a: number, b: number, c: number): void;
export function jwsheader_x5tS256(a: number, b: number): void;
export function jwsheader_setX5tS256(a: number, b: number, c: number): void;
export function jwsheader_typ(a: number, b: number): void;
export function jwsheader_setTyp(a: number, b: number, c: number): void;
export function jwsheader_cty(a: number, b: number): void;
export function jwsheader_setCty(a: number, b: number, c: number): void;
export function jwsheader_crit(a: number): number;
export function jwsheader_setCrit(a: number, b: number, c: number): void;
export function jwsheader_url(a: number, b: number): void;
export function jwsheader_setUrl(a: number, b: number, c: number, d: number): void;
export function jwsheader_nonce(a: number, b: number): void;
export function jwsheader_setNonce(a: number, b: number, c: number): void;
export function jwsheader_toJSON(a: number, b: number): void;
export function jwsheader_fromJSON(a: number, b: number): void;
export function jwsheader_clone(a: number): number;
export function __wbg_revocationbitmap_free(a: number): void;
export function revocationbitmap_new(): number;
export function revocationbitmap_type(a: number): void;
export function revocationbitmap_isRevoked(a: number, b: number): number;
export function revocationbitmap_revoke(a: number, b: number): number;
export function revocationbitmap_unrevoke(a: number, b: number): number;
export function revocationbitmap_len(a: number, b: number): void;
export function revocationbitmap_toService(a: number, b: number, c: number): void;
export function revocationbitmap_fromEndpoint(a: number, b: number): void;
export function __wbg_sdjwt_free(a: number): void;
export function sdjwt_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function sdjwt_presentation(a: number, b: number): void;
export function sdjwt_parse(a: number, b: number, c: number): void;
export function sdjwt_jwt(a: number, b: number): void;
export function sdjwt_disclosures(a: number): number;
export function sdjwt_keyBindingJwt(a: number, b: number): void;
export function sdjwt_toJSON(a: number, b: number): void;
export function sdjwt_fromJSON(a: number, b: number): void;
export function sdjwt_clone(a: number): number;
export function __wbg_methoddata_free(a: number): void;
export function methoddata_newBase58(a: number, b: number): number;
export function methoddata_newMultibase(a: number, b: number): number;
export function methoddata_newJwk(a: number, b: number): void;
export function methoddata_tryDecode(a: number, b: number): void;
export function methoddata_tryPublicKeyJwk(a: number, b: number): void;
export function methoddata_toJSON(a: number, b: number): void;
export function methoddata_fromJSON(a: number, b: number): void;
export function methoddata_clone(a: number): number;
export function timestamp_nowUTC(): number;
export function jwt_constructor(a: number, b: number): number;
export function sdjwt_toString(a: number, b: number): void;
export function __wbg_jwt_free(a: number): void;
export function jwsheader_x5c(a: number): number;
export function __wbg_decodedjwtcredential_free(a: number): void;
export function decodedjwtcredential_credential(a: number): number;
export function decodedjwtcredential_protectedHeader(a: number): number;
export function decodedjwtcredential_customClaims(a: number): number;
export function decodedjwtcredential_intoCredential(a: number): number;
export function __wbg_unknowncredential_free(a: number): void;
export function unknowncredential_tryIntoJwt(a: number): number;
export function unknowncredential_tryIntoCredential(a: number): number;
export function unknowncredential_tryIntoRaw(a: number): number;
export function unknowncredential_toJSON(a: number, b: number): void;
export function unknowncredential_fromJSON(a: number, b: number): void;
export function unknowncredential_clone(a: number): number;
export function __wbg_methoddigest_free(a: number): void;
export function methoddigest_new(a: number, b: number): void;
export function methoddigest_pack(a: number): number;
export function methoddigest_unpack(a: number, b: number): void;
export function methoddigest_clone(a: number): number;
export function __wbg_domainlinkageconfiguration_free(a: number): void;
export function domainlinkageconfiguration_new(a: number, b: number): void;
export function domainlinkageconfiguration_linkedDids(a: number): number;
export function domainlinkageconfiguration_issuers(a: number, b: number): void;
export function domainlinkageconfiguration_toJSON(a: number, b: number): void;
export function domainlinkageconfiguration_fromJSON(a: number, b: number): void;
export function domainlinkageconfiguration_clone(a: number): number;
export function __wbg_jwtdomainlinkagevalidator_free(a: number): void;
export function jwtdomainlinkagevalidator_new(a: number): number;
export function jwtdomainlinkagevalidator_validateLinkage(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function jwtdomainlinkagevalidator_validateCredential(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_storage_free(a: number): void;
export function storage_new(a: number, b: number): number;
export function storage_keyIdStorage(a: number): number;
export function storage_keyStorage(a: number): number;
export function encodeB64(a: number, b: number, c: number): void;
export function decodeB64(a: number, b: number, c: number): void;
export function start(): void;
export function __wbg_decodedjwtpresentation_free(a: number): void;
export function decodedjwtpresentation_presentation(a: number): number;
export function decodedjwtpresentation_protectedHeader(a: number): number;
export function decodedjwtpresentation_intoPresentation(a: number): number;
export function decodedjwtpresentation_expirationDate(a: number): number;
export function decodedjwtpresentation_issuanceDate(a: number): number;
export function decodedjwtpresentation_audience(a: number, b: number): void;
export function decodedjwtpresentation_customClaims(a: number): number;
export function __wbg_presentation_free(a: number): void;
export function presentation_BaseContext(a: number): void;
export function presentation_BaseType(a: number): void;
export function presentation_new(a: number, b: number): void;
export function presentation_context(a: number, b: number): void;
export function presentation_id(a: number, b: number): void;
export function presentation_type(a: number): number;
export function presentation_verifiableCredential(a: number): number;
export function presentation_holder(a: number, b: number): void;
export function presentation_refreshService(a: number, b: number): void;
export function presentation_termsOfUse(a: number, b: number): void;
export function presentation_proof(a: number): number;
export function presentation_setProof(a: number, b: number): void;
export function presentation_properties(a: number, b: number): void;
export function presentation_toJSON(a: number, b: number): void;
export function presentation_fromJSON(a: number, b: number): void;
export function __wbg_jwsverificationoptions_free(a: number): void;
export function jwsverificationoptions_new(a: number, b: number): void;
export function jwsverificationoptions_setNonce(a: number, b: number, c: number): void;
export function jwsverificationoptions_setMethodScope(a: number, b: number): void;
export function jwsverificationoptions_setMethodId(a: number, b: number): void;
export function jwsverificationoptions_toJSON(a: number, b: number): void;
export function jwsverificationoptions_fromJSON(a: number, b: number): void;
export function jwsverificationoptions_clone(a: number): number;
export function __wbg_coredid_free(a: number): void;
export function coredid_parse(a: number, b: number, c: number): void;
export function coredid_setMethodName(a: number, b: number, c: number, d: number): void;
export function coredid_validMethodName(a: number, b: number): number;
export function coredid_setMethodId(a: number, b: number, c: number, d: number): void;
export function coredid_validMethodId(a: number, b: number): number;
export function coredid_scheme(a: number, b: number): void;
export function coredid_authority(a: number, b: number): void;
export function coredid_method(a: number, b: number): void;
export function coredid_methodId(a: number, b: number): void;
export function coredid_join(a: number, b: number, c: number, d: number): void;
export function coredid_toUrl(a: number): number;
export function coredid_intoUrl(a: number): number;
export function coredid_toString(a: number, b: number): void;
export function coredid_toJSON(a: number, b: number): void;
export function coredid_fromJSON(a: number, b: number): void;
export function coredid_clone(a: number): number;
export function __wbg_decodedjws_free(a: number): void;
export function decodedjws_claims(a: number, b: number): void;
export function decodedjws_claimsBytes(a: number, b: number): void;
export function decodedjws_protectedHeader(a: number): number;
export function decodedjws_clone(a: number): number;
export function decodedjws_toJSON(a: number, b: number): void;
export function __wbg_sdobjectdecoder_free(a: number): void;
export function sdobjectdecoder_new(): number;
export function sdobjectdecoder_decode(a: number, b: number, c: number, d: number): void;
export function __wbg_jwkgenoutput_free(a: number): void;
export function jwkgenoutput_new(a: number, b: number, c: number): number;
export function jwkgenoutput_jwk(a: number): number;
export function jwkgenoutput_keyId(a: number, b: number): void;
export function jwkgenoutput_toJSON(a: number, b: number): void;
export function jwkgenoutput_fromJSON(a: number, b: number): void;
export function jwkgenoutput_clone(a: number): number;
export function __wbg_methodtype_free(a: number): void;
export function methodtype_Ed25519VerificationKey2018(): number;
export function methodtype_X25519KeyAgreementKey2019(): number;
export function methodtype_JsonWebKey(): number;
export function methodtype_toString(a: number, b: number): void;
export function methodtype_toJSON(a: number, b: number): void;
export function methodtype_fromJSON(a: number, b: number): void;
export function methodtype_clone(a: number): number;
export function presentation_clone(a: number): number;
export function coredid_toCoreDid(a: number): number;
export function __wbg_keybindingjwtvalidationoptions_free(a: number): void;
export function keybindingjwtvalidationoptions_new(a: number, b: number): void;
export function keybindingjwtvalidationoptions_toJSON(a: number, b: number): void;
export function keybindingjwtvalidationoptions_fromJSON(a: number, b: number): void;
export function keybindingjwtvalidationoptions_clone(a: number): number;
export function __wbg_jwtcredentialvalidationoptions_free(a: number): void;
export function jwtcredentialvalidationoptions_new(a: number, b: number): void;
export function jwtcredentialvalidationoptions_toJSON(a: number, b: number): void;
export function jwtcredentialvalidationoptions_fromJSON(a: number, b: number): void;
export function jwtcredentialvalidationoptions_clone(a: number): number;
export function __wbg_jwtpresentationvalidationoptions_free(a: number): void;
export function jwtpresentationvalidationoptions_new(a: number, b: number): void;
export function jwtpresentationvalidationoptions_toJSON(a: number, b: number): void;
export function jwtpresentationvalidationoptions_fromJSON(a: number, b: number): void;
export function jwtpresentationvalidationoptions_clone(a: number): number;
export function __wbg_statuslist2021entry_free(a: number): void;
export function statuslist2021entry_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function statuslist2021entry_id(a: number, b: number): void;
export function statuslist2021entry_purpose(a: number): number;
export function statuslist2021entry_index(a: number): number;
export function statuslist2021entry_statusListCredential(a: number, b: number): void;
export function statuslist2021entry_toStatus(a: number, b: number): void;
export function statuslist2021entry_clone(a: number): number;
export function statuslist2021entry_toJSON(a: number, b: number): void;
export function statuslist2021entry_fromJSON(a: number, b: number): void;
export function __wbg_statuslist2021_free(a: number): void;
export function statuslist2021_clone(a: number): number;
export function statuslist2021_new(a: number, b: number, c: number): void;
export function statuslist2021_len(a: number): number;
export function statuslist2021_get(a: number, b: number, c: number): void;
export function statuslist2021_set(a: number, b: number, c: number, d: number): void;
export function statuslist2021_intoEncodedStr(a: number, b: number): void;
export function statuslist2021_fromEncodedStr(a: number, b: number, c: number): void;
export function __wbg_didurl_free(a: number): void;
export function didurl_parse(a: number, b: number, c: number): void;
export function didurl_did(a: number): number;
export function didurl_urlStr(a: number, b: number): void;
export function didurl_fragment(a: number, b: number): void;
export function didurl_setFragment(a: number, b: number, c: number, d: number): void;
export function didurl_path(a: number, b: number): void;
export function didurl_setPath(a: number, b: number, c: number, d: number): void;
export function didurl_query(a: number, b: number): void;
export function didurl_setQuery(a: number, b: number, c: number, d: number): void;
export function didurl_join(a: number, b: number, c: number, d: number): void;
export function didurl_toString(a: number, b: number): void;
export function didurl_toJSON(a: number, b: number): void;
export function didurl_fromJSON(a: number, b: number): void;
export function didurl_clone(a: number): number;
export function __wbg_resolver_free(a: number): void;
export function resolver_new(a: number, b: number): void;
export function resolver_resolve(a: number, b: number, c: number, d: number): void;
export function resolver_resolveMultiple(a: number, b: number, c: number): void;
export function verifyEd25519(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_eddsajwsverifier_free(a: number): void;
export function eddsajwsverifier_new(): number;
export function eddsajwsverifier_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_credential_free(a: number): void;
export function credential_BaseContext(a: number): void;
export function credential_BaseType(a: number): void;
export function credential_new(a: number, b: number): void;
export function credential_createDomainLinkageCredential(a: number, b: number): void;
export function credential_context(a: number, b: number): void;
export function credential_id(a: number, b: number): void;
export function credential_type(a: number): number;
export function credential_credentialSubject(a: number, b: number): void;
export function credential_issuer(a: number, b: number): void;
export function credential_issuanceDate(a: number): number;
export function credential_expirationDate(a: number): number;
export function credential_credentialStatus(a: number, b: number): void;
export function credential_credentialSchema(a: number, b: number): void;
export function credential_refreshService(a: number, b: number): void;
export function credential_termsOfUse(a: number, b: number): void;
export function credential_evidence(a: number, b: number): void;
export function credential_nonTransferable(a: number): number;
export function credential_proof(a: number): number;
export function credential_properties(a: number, b: number): void;
export function credential_setProof(a: number, b: number): void;
export function credential_toJwtClaims(a: number, b: number, c: number): void;
export function credential_toJSON(a: number, b: number): void;
export function credential_fromJSON(a: number, b: number): void;
export function credential_clone(a: number): number;
export function __wbg_jwtpresentationvalidator_free(a: number): void;
export function jwtpresentationvalidator_new(a: number): number;
export function jwtpresentationvalidator_validate(a: number, b: number, c: number, d: number, e: number): void;
export function jwtpresentationvalidator_checkStructure(a: number, b: number): void;
export function jwtpresentationvalidator_extractHolder(a: number, b: number): void;
export function __wbg_linkeddomainservice_free(a: number): void;
export function linkeddomainservice_new(a: number, b: number): void;
export function linkeddomainservice_domains(a: number): number;
export function linkeddomainservice_toService(a: number): number;
export function linkeddomainservice_fromService(a: number, b: number): void;
export function linkeddomainservice_isValid(a: number): number;
export function linkeddomainservice_clone(a: number): number;
export function __wbg_proof_free(a: number): void;
export function proof_constructor(a: number, b: number, c: number, d: number): void;
export function proof_type(a: number, b: number): void;
export function proof_properties(a: number, b: number): void;
export function proof_toJSON(a: number, b: number): void;
export function proof_fromJSON(a: number, b: number): void;
export function proof_clone(a: number): number;
export function __wbg_statuslist2021credential_free(a: number): void;
export function statuslist2021credential_new(a: number, b: number): void;
export function statuslist2021credential_id(a: number, b: number): void;
export function statuslist2021credential_setCredentialStatus(a: number, b: number, c: number, d: number, e: number): void;
export function statuslist2021credential_purpose(a: number): number;
export function statuslist2021credential_entry(a: number, b: number, c: number): void;
export function statuslist2021credential_clone(a: number): number;
export function statuslist2021credential_fromJSON(a: number, b: number): void;
export function statuslist2021credential_toJSON(a: number, b: number): void;
export function __wbg_statuslist2021credentialbuilder_free(a: number): void;
export function statuslist2021credentialbuilder_new(a: number): number;
export function statuslist2021credentialbuilder_purpose(a: number, b: number): number;
export function statuslist2021credentialbuilder_subjectId(a: number, b: number, c: number, d: number): void;
export function statuslist2021credentialbuilder_expirationDate(a: number, b: number): number;
export function statuslist2021credentialbuilder_issuer(a: number, b: number, c: number, d: number): void;
export function statuslist2021credentialbuilder_context(a: number, b: number, c: number, d: number): void;
export function statuslist2021credentialbuilder_type(a: number, b: number, c: number): number;
export function statuslist2021credentialbuilder_proof(a: number, b: number): number;
export function statuslist2021credentialbuilder_build(a: number, b: number): void;
export function __wbg_service_free(a: number): void;
export function service_new(a: number, b: number): void;
export function service_id(a: number): number;
export function service_type(a: number): number;
export function service_serviceEndpoint(a: number): number;
export function service_properties(a: number, b: number): void;
export function service_toJSON(a: number, b: number): void;
export function service_fromJSON(a: number, b: number): void;
export function __wbg_coredocument_free(a: number): void;
export function coredocument_new(a: number, b: number): void;
export function coredocument_id(a: number, b: number): void;
export function coredocument_setId(a: number, b: number, c: number): void;
export function coredocument_controller(a: number, b: number): void;
export function coredocument_setController(a: number, b: number, c: number): void;
export function coredocument_alsoKnownAs(a: number, b: number): void;
export function coredocument_setAlsoKnownAs(a: number, b: number, c: number): void;
export function coredocument_verificationMethod(a: number, b: number): void;
export function coredocument_authentication(a: number, b: number): void;
export function coredocument_assertionMethod(a: number, b: number): void;
export function coredocument_keyAgreement(a: number, b: number): void;
export function coredocument_capabilityDelegation(a: number, b: number): void;
export function coredocument_capabilityInvocation(a: number, b: number): void;
export function coredocument_properties(a: number, b: number): void;
export function coredocument_setPropertyUnchecked(a: number, b: number, c: number, d: number, e: number): void;
export function coredocument_service(a: number, b: number): void;
export function coredocument_insertService(a: number, b: number, c: number): void;
export function coredocument_removeService(a: number, b: number, c: number): void;
export function coredocument_resolveService(a: number, b: number, c: number): void;
export function coredocument_methods(a: number, b: number, c: number): void;
export function coredocument_verificationRelationships(a: number, b: number): void;
export function coredocument_insertMethod(a: number, b: number, c: number, d: number): void;
export function coredocument_removeMethod(a: number, b: number, c: number): void;
export function coredocument_resolveMethod(a: number, b: number, c: number, d: number): void;
export function coredocument_attachMethodRelationship(a: number, b: number, c: number, d: number): void;
export function coredocument_detachMethodRelationship(a: number, b: number, c: number, d: number): void;
export function coredocument_verifyJws(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function coredocument_revokeCredentials(a: number, b: number, c: number, d: number): void;
export function coredocument_unrevokeCredentials(a: number, b: number, c: number, d: number): void;
export function coredocument_clone(a: number, b: number): void;
export function coredocument__shallowCloneInternal(a: number): number;
export function coredocument__strongCountInternal(a: number): number;
export function coredocument_toJSON(a: number, b: number): void;
export function coredocument_fromJSON(a: number, b: number): void;
export function coredocument_generateMethod(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function coredocument_purgeMethod(a: number, b: number, c: number, d: number): void;
export function coredocument_createJws(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function coredocument_createCredentialJwt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function coredocument_createPresentationJwt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_iotaidentityclientext_free(a: number): void;
export function iotaidentityclientext_newDidOutput(a: number, b: number, c: number, d: number, e: number): void;
export function iotaidentityclientext_updateDidOutput(a: number, b: number, c: number): void;
export function iotaidentityclientext_deactivateDidOutput(a: number, b: number, c: number): void;
export function iotaidentityclientext_resolveDid(a: number, b: number, c: number): void;
export function iotaidentityclientext_resolveDidOutput(a: number, b: number, c: number): void;
export function __wbg_sdobjectencoder_free(a: number): void;
export function sdobjectencoder_new(a: number, b: number): void;
export function sdobjectencoder_conceal(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function sdobjectencoder_addSdAlgProperty(a: number): void;
export function sdobjectencoder_encodeToString(a: number, b: number): void;
export function sdobjectencoder_encodeToObject(a: number, b: number): void;
export function sdobjectencoder_toJSON(a: number, b: number): void;
export function sdobjectencoder_addDecoys(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_keybindingjwtclaims_free(a: number): void;
export function keybindingjwtclaims_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function keybindingjwtclaims_toString(a: number, b: number): void;
export function keybindingjwtclaims_iat(a: number): number;
export function keybindingjwtclaims_aud(a: number, b: number): void;
export function keybindingjwtclaims_nonce(a: number, b: number): void;
export function keybindingjwtclaims_sdHash(a: number, b: number): void;
export function keybindingjwtclaims_customProperties(a: number, b: number): void;
export function keybindingjwtclaims_keyBindingJwtHeaderTyp(a: number): void;
export function keybindingjwtclaims_toJSON(a: number, b: number): void;
export function keybindingjwtclaims_fromJSON(a: number, b: number): void;
export function keybindingjwtclaims_clone(a: number): number;
export function __wbg_verificationmethod_free(a: number): void;
export function verificationmethod_newFromJwk(a: number, b: number, c: number, d: number, e: number): void;
export function verificationmethod_id(a: number): number;
export function verificationmethod_setId(a: number, b: number, c: number): void;
export function verificationmethod_controller(a: number): number;
export function verificationmethod_setController(a: number, b: number): void;
export function verificationmethod_type(a: number): number;
export function verificationmethod_setType(a: number, b: number): void;
export function verificationmethod_data(a: number): number;
export function verificationmethod_setData(a: number, b: number): void;
export function verificationmethod_properties(a: number, b: number): void;
export function verificationmethod_setPropertyUnchecked(a: number, b: number, c: number, d: number, e: number): void;
export function verificationmethod_toJSON(a: number, b: number): void;
export function verificationmethod_fromJSON(a: number, b: number): void;
export function verificationmethod_clone(a: number): number;
export function sdobjectencoder_toString(a: number, b: number): void;
export function service_clone(a: number): number;
export function __wbg_jwtcredentialvalidator_free(a: number): void;
export function jwtcredentialvalidator_new(a: number): number;
export function jwtcredentialvalidator_validate(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function jwtcredentialvalidator_verifySignature(a: number, b: number, c: number, d: number, e: number): void;
export function jwtcredentialvalidator_checkExpiresOnOrAfter(a: number, b: number, c: number): void;
export function jwtcredentialvalidator_checkIssuedOnOrBefore(a: number, b: number, c: number): void;
export function jwtcredentialvalidator_checkSubjectHolderRelationship(a: number, b: number, c: number, d: number, e: number): void;
export function jwtcredentialvalidator_checkStatus(a: number, b: number, c: number, d: number): void;
export function jwtcredentialvalidator_checkStatusWithStatusList2021(a: number, b: number, c: number, d: number): void;
export function jwtcredentialvalidator_extractIssuer(a: number, b: number): void;
export function jwtcredentialvalidator_extractIssuerFromJwt(a: number, b: number): void;
export function __wbg_iotadocument_free(a: number): void;
export function iotadocument_new(a: number, b: number, c: number): void;
export function iotadocument_newWithId(a: number): number;
export function iotadocument_id(a: number, b: number): void;
export function iotadocument_controller(a: number, b: number): void;
export function iotadocument_alsoKnownAs(a: number, b: number): void;
export function iotadocument_setAlsoKnownAs(a: number, b: number, c: number): void;
export function iotadocument_properties(a: number, b: number): void;
export function iotadocument_setPropertyUnchecked(a: number, b: number, c: number, d: number, e: number): void;
export function iotadocument_service(a: number, b: number): void;
export function iotadocument_insertService(a: number, b: number, c: number): void;
export function iotadocument_removeService(a: number, b: number, c: number): void;
export function iotadocument_resolveService(a: number, b: number, c: number): void;
export function iotadocument_methods(a: number, b: number, c: number): void;
export function iotadocument_insertMethod(a: number, b: number, c: number, d: number): void;
export function iotadocument_removeMethod(a: number, b: number, c: number): void;
export function iotadocument_resolveMethod(a: number, b: number, c: number, d: number): void;
export function iotadocument_attachMethodRelationship(a: number, b: number, c: number, d: number): void;
export function iotadocument_detachMethodRelationship(a: number, b: number, c: number, d: number): void;
export function iotadocument_verifyJws(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function iotadocument_pack(a: number, b: number): void;
export function iotadocument_packWithEncoding(a: number, b: number, c: number): void;
export function iotadocument_unpackFromOutput(a: number, b: number, c: number, d: number): void;
export function iotadocument_unpackFromBlock(a: number, b: number, c: number, d: number): void;
export function iotadocument_metadata(a: number, b: number): void;
export function iotadocument_metadataCreated(a: number, b: number): void;
export function iotadocument_setMetadataCreated(a: number, b: number, c: number): void;
export function iotadocument_metadataUpdated(a: number, b: number): void;
export function iotadocument_setMetadataUpdated(a: number, b: number, c: number): void;
export function iotadocument_metadataDeactivated(a: number, b: number): void;
export function iotadocument_setMetadataDeactivated(a: number, b: number, c: number): void;
export function iotadocument_metadataStateControllerAddress(a: number, b: number): void;
export function iotadocument_metadataGovernorAddress(a: number, b: number): void;
export function iotadocument_setMetadataPropertyUnchecked(a: number, b: number, c: number, d: number, e: number): void;
export function iotadocument_revokeCredentials(a: number, b: number, c: number, d: number): void;
export function iotadocument_unrevokeCredentials(a: number, b: number, c: number, d: number): void;
export function iotadocument_clone(a: number, b: number): void;
export function iotadocument__shallowCloneInternal(a: number): number;
export function iotadocument__strongCountInternal(a: number): number;
export function iotadocument_toJSON(a: number, b: number): void;
export function iotadocument_fromJSON(a: number, b: number): void;
export function iotadocument_toCoreDocument(a: number, b: number): void;
export function iotadocument_generateMethod(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function iotadocument_purgeMethod(a: number, b: number, c: number, d: number): void;
export function iotadocument_createJwt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function iotadocument_createJws(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function iotadocument_createCredentialJwt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function iotadocument_createPresentationJwt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_iotadocumentmetadata_free(a: number): void;
export function iotadocumentmetadata_created(a: number): number;
export function iotadocumentmetadata_updated(a: number): number;
export function iotadocumentmetadata_deactivated(a: number): number;
export function iotadocumentmetadata_stateControllerAddress(a: number, b: number): void;
export function iotadocumentmetadata_governorAddress(a: number, b: number): void;
export function iotadocumentmetadata_properties(a: number, b: number): void;
export function iotadocumentmetadata_toJSON(a: number, b: number): void;
export function iotadocumentmetadata_fromJSON(a: number, b: number): void;
export function iotadocumentmetadata_clone(a: number): number;
export function __wbg_jwtpresentationoptions_free(a: number): void;
export function jwtpresentationoptions_new(a: number, b: number): void;
export function jwtpresentationoptions_toJSON(a: number, b: number): void;
export function jwtpresentationoptions_fromJSON(a: number, b: number): void;
export function jwtpresentationoptions_clone(a: number): number;
export function __wbg_jwssignatureoptions_free(a: number): void;
export function jwssignatureoptions_new(a: number, b: number): void;
export function jwssignatureoptions_setAttachJwk(a: number, b: number): void;
export function jwssignatureoptions_setB64(a: number, b: number): void;
export function jwssignatureoptions_setTyp(a: number, b: number, c: number): void;
export function jwssignatureoptions_setCty(a: number, b: number, c: number): void;
export function jwssignatureoptions_serUrl(a: number, b: number, c: number, d: number): void;
export function jwssignatureoptions_setNonce(a: number, b: number, c: number): void;
export function jwssignatureoptions_setKid(a: number, b: number, c: number): void;
export function jwssignatureoptions_setDetachedPayload(a: number, b: number): void;
export function jwssignatureoptions_setCustomHeaderParameters(a: number, b: number, c: number): void;
export function jwssignatureoptions_toJSON(a: number, b: number): void;
export function jwssignatureoptions_fromJSON(a: number, b: number): void;
export function jwssignatureoptions_clone(a: number): number;
export function __wbg_iotadid_free(a: number): void;
export function iotadid_static_default_network(a: number): void;
export function iotadid_new(a: number, b: number, c: number, d: number, e: number): void;
export function iotadid_fromAliasId(a: number, b: number, c: number, d: number, e: number): void;
export function iotadid_placeholder(a: number, b: number, c: number): void;
export function iotadid_parse(a: number, b: number, c: number): void;
export function iotadid_network(a: number, b: number): void;
export function iotadid_tag(a: number, b: number): void;
export function iotadid_toCoreDid(a: number): number;
export function iotadid_scheme(a: number, b: number): void;
export function iotadid_authority(a: number, b: number): void;
export function iotadid_method(a: number, b: number): void;
export function iotadid_methodId(a: number, b: number): void;
export function iotadid_join(a: number, b: number, c: number, d: number): void;
export function iotadid_toUrl(a: number): number;
export function iotadid_toAliasId(a: number, b: number): void;
export function iotadid_intoUrl(a: number): number;
export function iotadid_toString(a: number, b: number): void;
export function iotadid_toJSON(a: number, b: number): void;
export function iotadid_fromJSON(a: number, b: number): void;
export function iotadid_clone(a: number): number;
export function __wbg_disclosure_free(a: number): void;
export function disclosure_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function disclosure_parse(a: number, b: number, c: number): void;
export function disclosure_disclosure(a: number, b: number): void;
export function disclosure_salt(a: number, b: number): void;
export function disclosure_claimName(a: number, b: number): void;
export function disclosure_claimValue(a: number, b: number): void;
export function disclosure_toJSON(a: number, b: number): void;
export function disclosure_fromJSON(a: number, b: number): void;
export function __wbg_methodscope_free(a: number): void;
export function methodscope_VerificationMethod(): number;
export function methodscope_Authentication(): number;
export function methodscope_AssertionMethod(): number;
export function methodscope_KeyAgreement(): number;
export function methodscope_CapabilityDelegation(): number;
export function methodscope_CapabilityInvocation(): number;
export function methodscope_toString(a: number, b: number): void;
export function methodscope_toJSON(a: number, b: number): void;
export function methodscope_fromJSON(a: number, b: number): void;
export function methodscope_clone(a: number): number;
export function iotadid_static_method(a: number): void;
export function disclosure_toEncodedString(a: number, b: number): void;
export function disclosure_toString(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__h6b756352abf9a872(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h4225c528b42ae029(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
